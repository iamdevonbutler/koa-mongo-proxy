- have a way to add supported operations via api. e.g. a way to process another query type (make `this` === preprocess)
- add custom types
- document the db alias const {db} = require('mongorules').
- get date types right. (do docs last) verify dates in Database e.g. timestamp constructor date constructor.

- find out minimun mongo version this works w/.
- put payloads from tests into a file called payloads.js
- preprocess.utils.js & preprocess.js (preprocess.insert, preprocess.update)
- make a list of all the operations from docs and make sure i have tests for all of them.
   - e.g. $.thisandthat

- there are types of shell methods. make sure databse methods work and are mentioned in docs.
- see if $explain works (https://docs.mongodb.com/v3.2/reference/operator/meta/explain/#metaOp._S_explain)
- change the way we do dates. there should be timestamp and date types. (https://docs.mongodb.com/v3.2/reference/operator/update/currentDate/)
- defaultDb docs
- you can do the schema types the way react does.
- dont need _.flatten - use spread.
- test: https://docs.mongodb.com/manual/reference/operator/update/set/ (last example)
- if type is given, validate to be sure the default is of that type
- need to implement global error handler w/ proxy code.
- check all intergation tests and try/catch errors. use setDefaultDb func?
- allow for custom sanitize func
- rename static methods to model method
- see how decorators can help w/ readibility
- pref test.
- test removeModel and removeModels. add tests. in readme mention use cases for these (really edge case - if your api has a update hook you can change your models w/o taking the server down).
- make sure gloabal and local error handelrs work
- fix underscore `private` inconsistency. there are funcs in schema that should not have an underscore.
- test duplicate key inserts and inserts on unique field - see what the error messages look like.
- on schema file dont use _.isBoolean and destructure dependencies. utils can curry a type check func. var isBoolean = utils.isType('boolean')
- array of arrays should get a mention in the docs and i should play around w/ them to see how they work.
- date obj changed by sanitiz
- verify im doing dates right and _id.
- static methods only accept generators?
- test multiple database instances
- use parens more for errors (see the last else statement in proxy step1)
- should see what this is like when a model has no scheam and has statics only.
- utils.isType should not be private
- getDatabase should always return a proxy - elims errors where people may pass in a third param by accident, and if someone wants a unproxied obj they can call getConnection and then conn.db()
- metion $databaseName and the tradeoff - want a clean namespace for naming models. wouldnt be able to have a model named open w/o dollar prefix.
- addModel should have more checks to ensure people are passing in a schema.
- idk if _getModel (should be getModels) should throw.
- add gh questions that are answered to a FAQ doc.
- test time implementation
- might be able to cache the deconstruction...
- pre-push live search console.logs
- perf test values, array of values, array of objects.
- debug statement - say something about that in docs.
- could replace OOP validator w/ functional validator. -  find out how costly obj construction is in JS
- travis should dl mongo 6.0 not ^6.0
- might be double wrapping promises - db.users.remove is a promise to begin w/.
- sanitize changes date from obj to string (will cause bugs)
- restructure docs (/doc/...)
- collection error handler absent from docs - .
- doxygen tests 'none' refer to unit tests, most if not all things are tested via integration tests.
- dyanamic docs - doc compiler
- add @file declarations
- too much `this`.
- what happens when you try to do shit w/o calling addDatabase
- in docs mention that this is for microservices and a deisgn paradigm of multiple db connections to a distributed cluser of datastores.
- underscore prefixes in utils - remove, public has 2 audiences, 1) public to implementer of lib and public to myself as i include dependencies.
- mention in docs that results from add/get database return a proxy, but u can get the naked (unproxied) connectino obj from getConnection
- find out more uses for debug and evaluate existing uses.
- reversing no validate - going to be the first param so u can query a - change docs.
- how to insert types such as NumberLong (https://docs.mongodb.com/v3.2/reference/operator/query/type/)
- see if query modifiers work w/ cursors (https://docs.mongodb.com/v3.2/reference/operator/query-modifier/)
- to test the error handling, do a duplicate key insert and make sure that returns an error.
- gotta test unique indexes - pref an upsert after doing a unique index and it should error (https://docs.mongodb.com/v3.2/core/index-unique/#index-type-unique)
- test mixed types w/ integration test.

TYPES!!!!
const {type} = require('mongorules');

module.exports = {

  "account.name": {
    required: true,
    type: type.string,
    type: type.Array(type.number),
    type: type.Array(type.mixed(type.number, type.string)),
    type: type.Array(type.object),
  },

  out >>> {
    type: array,
    children: {
      type: ['number', 'string']
    }

  }
